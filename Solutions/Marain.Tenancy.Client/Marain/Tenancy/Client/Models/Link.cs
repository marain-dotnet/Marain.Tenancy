// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Marain.Tenancy.Client.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class Link
    {
        /// <summary>
        /// Initializes a new instance of the Link class.
        /// </summary>
        public Link()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Link class.
        /// </summary>
        /// <param name="href">URI of the target resource</param>
        /// <param name="templated">URI Template</param>
        /// <param name="type">Media type indication of the target
        /// resource</param>
        /// <param name="name">Secondary key</param>
        /// <param name="profile">Additional semantics of the target
        /// resource</param>
        /// <param name="title">Human-readable identifier</param>
        /// <param name="hreflang">Language indication of the target resource
        /// [RFC5988]</param>
        public Link(string href, bool? templated = default(bool?), string type = default(string), string name = default(string), string profile = default(string), string title = default(string), string hreflang = default(string))
        {
            Href = href;
            Templated = templated;
            Type = type;
            Name = name;
            Profile = profile;
            Title = title;
            Hreflang = hreflang;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets URI of the target resource
        /// </summary>
        /// <remarks>
        /// Either a URI [RFC3986] or URI Template [RFC6570] of the target
        /// resource.
        /// </remarks>
        [JsonProperty(PropertyName = "href")]
        public string Href { get; set; }

        /// <summary>
        /// Gets or sets URI Template
        /// </summary>
        /// <remarks>
        /// Is true when the link object's href property is a URI Template.
        /// Defaults to false.
        /// </remarks>
        [JsonProperty(PropertyName = "templated")]
        public bool? Templated { get; set; }

        /// <summary>
        /// Gets or sets media type indication of the target resource
        /// </summary>
        /// <remarks>
        /// When present, used as a hint to indicate the media type expected
        /// when dereferencing the target resource.
        /// </remarks>
        [JsonProperty(PropertyName = "type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets secondary key
        /// </summary>
        /// <remarks>
        /// When present, may be used as a secondary key for selecting link
        /// objects that contain the same relation type.
        /// </remarks>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets additional semantics of the target resource
        /// </summary>
        /// <remarks>
        /// A URI that, when dereferenced, results in a profile to allow
        /// clients to learn about additional semantics (constraints,
        /// conventions, extensions) that are associated with the target
        /// resource representation, in addition to those defined by the HAL
        /// media type and relations.
        /// </remarks>
        [JsonProperty(PropertyName = "profile")]
        public string Profile { get; set; }

        /// <summary>
        /// Gets or sets human-readable identifier
        /// </summary>
        /// <remarks>
        /// When present, is used to label the destination of a link such that
        /// it can be used as a human-readable identifier (e.g. a menu entry)
        /// in the language indicated by the Content-Language header (if
        /// present).
        /// </remarks>
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets language indication of the target resource [RFC5988]
        /// </summary>
        /// <remarks>
        /// When present, is a hint in RFC5646 format indicating what the
        /// language of the result of dereferencing the link should be.  Note
        /// that this is only a hint; for example, it does not override the
        /// Content-Language header of a HTTP response obtained by actually
        /// following the link.
        /// </remarks>
        [JsonProperty(PropertyName = "hreflang")]
        public string Hreflang { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Href == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Href");
            }
            if (Type != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(Type, "^(application|audio|example|image|message|model|multipart|text|video)\\/[a-zA-Z0-9!#\\$&\\.\\+-\\^_]{1,127}$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Type", "^(application|audio|example|image|message|model|multipart|text|video)\\/[a-zA-Z0-9!#\\$&\\.\\+-\\^_]{1,127}$");
                }
            }
            if (Hreflang != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(Hreflang, "^([a-zA-Z]{2,3}(-[a-zA-Z]{3}(-[a-zA-Z]{3}){0,2})?(-[a-zA-Z]{4})?(-([a-zA-Z]{2}|[0-9]{3}))?(-([a-zA-Z0-9]{5,8}|[0-9][a-zA-Z0-9]{3}))*([0-9A-WY-Za-wy-z](-[a-zA-Z0-9]{2,8}){1,})*(x-[a-zA-Z0-9]{2,8})?)|(x-[a-zA-Z0-9]{2,8})|(en-GB-oed)|(i-ami)|(i-bnn)|(i-default)|(i-enochian)|(i-hak)|(i-klingon)|(i-lux)|(i-mingo)|(i-navajo)|(i-pwn)|(i-tao)|(i-tay)|(i-tsu)|(sgn-BE-FR)|(sgn-BE-NL)|(sgn-CH-DE)|(art-lojban)|(cel-gaulish)|(no-bok)|(no-nyn)|(zh-guoyu)|(zh-hakka)|(zh-min)|(zh-min-nan)|(zh-xiang)$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "Hreflang", "^([a-zA-Z]{2,3}(-[a-zA-Z]{3}(-[a-zA-Z]{3}){0,2})?(-[a-zA-Z]{4})?(-([a-zA-Z]{2}|[0-9]{3}))?(-([a-zA-Z0-9]{5,8}|[0-9][a-zA-Z0-9]{3}))*([0-9A-WY-Za-wy-z](-[a-zA-Z0-9]{2,8}){1,})*(x-[a-zA-Z0-9]{2,8})?)|(x-[a-zA-Z0-9]{2,8})|(en-GB-oed)|(i-ami)|(i-bnn)|(i-default)|(i-enochian)|(i-hak)|(i-klingon)|(i-lux)|(i-mingo)|(i-navajo)|(i-pwn)|(i-tao)|(i-tay)|(i-tsu)|(sgn-BE-FR)|(sgn-BE-NL)|(sgn-CH-DE)|(art-lojban)|(cel-gaulish)|(no-bok)|(no-nyn)|(zh-guoyu)|(zh-hakka)|(zh-min)|(zh-min-nan)|(zh-xiang)$");
                }
            }
        }
    }
}
